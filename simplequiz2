<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Quiz Mejorado</title>
  <link href="https://fonts.googleapis.com/css?family=Roboto:400,500,700&display=swap" rel="stylesheet">
  <style>
    /* Variables de colores */
    :root {
      --background: linear-gradient(135deg, #a1c4fd 0%, #c2e9fb 100%);
      --container-bg: rgba(255, 255, 255, 0.8);
      --primary-color: #ff8a65;
      --primary-hover: #ff7043;
      --text-color: #333;
      --timer-bg: #eee;
      --timer-fill: #76c7c0;
    }
    .dark-theme {
      --background: #333;
      --container-bg: rgba(0, 0, 0, 0.7);
      --primary-color: #f39c12;
      --primary-hover: #e67e22;
      --text-color: #eee;
      --timer-bg: #555;
      --timer-fill: #f1c40f;
    }
    /* Estilos globales */
    * { box-sizing: border-box; }
    body {
      margin: 0;
      font-family: 'Roboto', sans-serif;
      background: var(--background);
      color: var(--text-color);
      display: flex;
      flex-direction: column;
      align-items: center;
      min-height: 100vh;
      padding: 20px;
      transition: background 0.3s, color 0.3s;
    }
    .container {
      width: 100%;
      max-width: 600px;
      background: var(--container-bg);
      border-radius: 8px;
      padding: 20px;
      margin: 20px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
      position: relative;
    }
    .top-bar {
      display: flex;
      align-items: center;
      justify-content: space-between;
      flex-wrap: wrap;
      margin-bottom: 10px;
    }
    .top-bar span {
      font-size: 20px;
      font-weight: 500;
      margin-right: 10px;
    }
    .top-bar select, .top-bar button {
      margin-right: 10px;
      padding: 6px;
      font-size: 16px;
    }
    #fileInfo {
      flex: 1;
      word-wrap: break-word;
      max-width: 100%;
    }
    .config {
      margin-bottom: 20px;
    }
    .radio-group {
      display: flex;
      align-items: center;
      flex-wrap: wrap;
    }
    .radio-group label {
      margin-right: 15px;
      font-weight: 500;
    }
    .checkbox-group label,
    .settings-group label {
      display: block;
      margin: 10px 0;
      font-weight: 500;
    }
    input[type="text"],
    input[type="number"] {
      width: 100%;
      padding: 10px;
      border: none;
      border-radius: 4px;
      margin-top: 5px;
    }
    input[type="text"] {
      font-size: 20px;
      padding: 12px;
      height: 45px;
    }
    input[type="checkbox"],
    input[type="radio"] {
      margin-right: 5px;
    }
    button {
      background: var(--primary-color);
      border: none;
      border-radius: 4px;
      color: #fff;
      padding: 10px 20px;
      font-size: 16px;
      cursor: pointer;
      transition: background 0.3s, transform 0.2s;
      margin: 10px 5px;
    }
    button:hover {
      background: var(--primary-hover);
      transform: scale(1.02);
    }
    #pregunta {
      font-size: 24px;
      margin: 20px 0;
      font-weight: 500;
      text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);
      color: var(--text-color);
    }
    #respuestaCodificada {
      font-size: 22px;
      margin: 15px 0;
      letter-spacing: 4px;
      font-weight: bold;
      color: var(--text-color);
    }
    .centered-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
    }
    .botones {
      display: flex;
      gap: 10px;
      margin: 10px 0;
    }
    #resultado, #message {
      margin-top: 15px;
      font-size: 18px;
    }
    .stats {
      margin-top: 20px;
      font-size: 16px;
    }
    .stats span {
      margin-right: 15px;
    }
    /* Temporizador visual */
    #timerContainer {
      width: 100%;
      height: 10px;
      background: var(--timer-bg);
      border-radius: 5px;
      overflow: hidden;
      margin-bottom: 15px;
    }
    #timerBar {
      height: 100%;
      background: var(--timer-fill);
      width: 100%;
      transition: width 1s linear;
    }
    /* Indicador de progreso */
    #progressIndicator {
      font-size: 16px;
      margin-bottom: 10px;
      text-align: right;
    }
    /* Animaciones */
    .fade-in {
      animation: fadeIn 0.8s ease-in-out;
    }
    .fade-out {
      animation: fadeOut 0.8s ease-in-out;
    }
    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.95); }
      to { opacity: 1; transform: scale(1); }
    }
    @keyframes fadeOut {
      from { opacity: 1; transform: scale(1); }
      to { opacity: 0; transform: scale(0.95); }
    }
    /* Modal de instrucciones */
    #instructionsModal {
      position: fixed;
      top: 0; left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.7);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
    }
    #instructionsContent {
      background: var(--container-bg);
      padding: 20px;
      border-radius: 8px;
      max-width: 500px;
      text-align: center;
    }
    #instructionsContent h2 {
      margin-top: 0;
    }
    /* Media queries para móviles */
    @media (max-width: 600px) {
      .container {
        padding: 15px;
        margin: 10px;
      }
      .top-bar span {
        font-size: 18px;
      }
      .top-bar select, .top-bar button {
        font-size: 14px;
        padding: 4px;
      }
      #pregunta {
        font-size: 20px;
      }
      #respuestaCodificada {
        font-size: 18px;
        letter-spacing: 2px;
      }
      input[type="text"] {
        font-size: 18px;
        height: 40px;
      }
      button {
        font-size: 14px;
        padding: 8px 16px;
      }
      .stats {
        font-size: 14px;
      }
    }
  </style>
</head>
<body>
  <!-- Modal de instrucciones -->
  <div id="instructionsModal">
    <div id="instructionsContent">
      <h2>Bienvenido al Quiz</h2>
      <p>Instrucciones:</p>
      <ul style="text-align: left;">
        <li>Selecciona un archivo CSV con preguntas.</li>
        <li>Elige la dirección de traducción.</li>
        <li>Configura las opciones y presiona "Iniciar Juego".</li>
        <li>Responde las preguntas dentro del tiempo establecido.</li>
        <li>Utiliza el botón "Pista" para revelar letras adicionales.</li>
        <li>Usa el botón "Solución" para ver la respuesta completa.</li>
        <li>Puedes cambiar el tema entre claro y oscuro.</li>
      </ul>
      <button id="closeInstructions">Comenzar</button>
    </div>
  </div>

  <div class="container">
    <div class="top-bar">
      <span>Quiz Mejorado</span>
      <div>
        <select id="csvSelector">
          <option value="">Selecciona un archivo CSV</option>
          <option value="https://raw.githubusercontent.com/MikeSeaver555/simplequiz/refs/heads/main/csv_files/TB1.csv">TB1</option>
          <option value="https://raw.githubusercontent.com/MikeSeaver555/simplequiz/refs/heads/main/csv_files/TB2.csv">TB2</option>
        </select>
        <button id="themeToggleButton">Cambiar Tema</button>
      </div>
      <span id="fileInfo"></span>
    </div>

    <div class="config">
      <div class="radio-group">
        <label>
          <input type="radio" name="translationDirection" value="esToEn" checked>
          Español a Inglés
        </label>
        <label>
          <input type="radio" name="translationDirection" value="enToEs">
          Inglés a Español
        </label>
      </div>

      <div class="checkbox-group">
        <label>
          <input type="checkbox" id="mostrarCaracteresEspeciales" checked>
          Mostrar caracteres especiales
        </label>
        <label>
          <input type="checkbox" id="ignoreCase" checked>
          Ignorar mayúsculas y minúsculas
        </label>
        <label>
          <input type="checkbox" id="ignorePeriod" checked>
          Ignorar punto final
        </label>
      </div>
      <div class="settings-group">
        <label>
          Número de preguntas:
          <input type="number" id="numQuestions" value="10" min="1">
        </label>
        <label>
          Tiempo por pregunta (segundos):
          <input type="number" id="timePerQuestion" value="0" min="0">
        </label>
      </div>
    </div>
    <!-- Mensaje integrado -->
    <div id="message"></div>
    <!-- Indicador de progreso -->
    <div id="progressIndicator"></div>
    <!-- Temporizador visual -->
    <div id="timerContainer" style="display:none;">
      <div id="timerBar"></div>
    </div>
    <!-- Botón para iniciar/reiniciar el juego -->
    <button id="startButton">Iniciar Juego</button>
    
    <!-- Área del juego -->
    <div id="pregunta" style="display:none;"></div>
    <p id="respuestaCodificada" style="display:none;"></p>
    <div class="centered-container">
      <input type="text" id="respuesta" placeholder="Escribe tu respuesta" style="display:none;">
      <div class="botones">
        <button id="solutionButton" style="display:none;">Solución</button>
        <button id="hintButton" style="display:none;">Pista</button>
        <button id="answerButton" style="display:none;">Responder</button>
      </div>
    </div>
    <p id="resultado"></p>
    <p class="stats">
      Aciertos: <span id="aciertos">0</span>
      Fallos: <span id="fallos">0</span>
      No Contestadas: <span id="noContestadas">0</span>
    </p>
  </div>
  
  <!-- Elementos de audio para feedback -->
  <audio id="correctSound" src="correct.mp3"></audio>
  <audio id="incorrectSound" src="incorrect.mp3"></audio>
  <audio id="timeUpSound" src="timeout.mp3"></audio>

  <script>
    // Variables y lógica del juego
    const waitingTimeCorrect = 1500;
    const waitingTimeFail = 2000;
    let preguntas = [];
    let preguntaObj = null;
    let respuestaCorrecta = "";
    let respuestaOculta = "";
    let intentosRestantes = 4;
    let temporizador;
    let preguntasJugadas = 0;
    let aciertos = 0, fallos = 0, noContestadas = 0;
    let totalPreguntas = 0;
    let timerInterval;
    
    // Cacheo de elementos del DOM
    const csvSelector = document.getElementById('csvSelector');
    const fileInfo = document.getElementById('fileInfo');
    const messageElem = document.getElementById('message');
    const progressIndicator = document.getElementById('progressIndicator');
    const timerContainer = document.getElementById('timerContainer');
    const timerBar = document.getElementById('timerBar');
    const instructionsModal = document.getElementById('instructionsModal');
    const closeInstructions = document.getElementById('closeInstructions');
    const themeToggleButton = document.getElementById('themeToggleButton');
    const body = document.body;
    const correctSound = document.getElementById('correctSound');
    const incorrectSound = document.getElementById('incorrectSound');
    const timeUpSound = document.getElementById('timeUpSound');
    
    // Manejo del modal de instrucciones
    closeInstructions.addEventListener('click', () => {
      instructionsModal.style.display = 'none';
    });
    
    // Cambio de tema (claro/oscuro)
    themeToggleButton.addEventListener('click', () => {
      body.classList.toggle('dark-theme');
    });
    
    // Carga el CSV desde la URL seleccionada
    csvSelector.addEventListener('change', function(event) {
      const url = event.target.value;
      if (!url) return;
      fetch(url)
        .then(response => {
          if (!response.ok) {
            throw new Error('Error al cargar el CSV');
          }
          return response.text();
        })
        .then(contenido => {
          let lineas = contenido.split('\n')
            .map(linea => linea.trim())
            .filter(linea => linea);
          if (lineas.length > 0 && (lineas[0].toLowerCase().includes("pregunta") ||
              lineas[0].toLowerCase().includes("español"))) {
            lineas.shift();
          }
          preguntas = lineas.map(linea => {
            let delimiter = linea.includes(';') ? ';' : ',';
            let partes = linea.split(delimiter);
            if (partes.length < 2) {
              throw new Error("Formato incorrecto en el archivo");
            }
            return { es: partes[0].trim(), en: partes[1].trim() };
          });
          totalPreguntas = preguntas.length;
          preguntas = preguntas.sort(() => Math.random() - 0.5);
          fileInfo.innerText = `${lineas.length} preguntas cargadas`;
          messageElem.innerText = ""; // Limpiar mensajes previos
        })
        .catch(error => {
          console.error("Error:", error);
          fileInfo.innerText = "Error al cargar el CSV";
          messageElem.innerText = "No se pudo cargar el archivo CSV. Revisa la URL o el formato.";
        });
    });
    
    function iniciarJuego() {
      if (preguntas.length === 0) {
        messageElem.innerText = "Carga primero un archivo de preguntas desde el desplegable.";
        return;
      }
      // Reinicia estadísticas
      aciertos = 0; fallos = 0; noContestadas = 0;
      actualizarEstadisticas();
      preguntasJugadas = 0;
      // Actualiza el progreso
      progressIndicator.innerText = `Pregunta ${preguntasJugadas + 1} de ${document.getElementById('numQuestions').value}`;
      // Muestra elementos del juego
      document.getElementById('pregunta').style.display = "block";
      document.getElementById('respuestaCodificada').style.display = "block";
      document.getElementById('respuesta').style.display = "block";
      document.getElementById('answerButton').style.display = "inline-block";
      document.getElementById('solutionButton').style.display = "inline-block";
      document.getElementById('hintButton').style.display = "inline-block";
      
      // Reinicia el temporizador visual
      timerBar.style.width = "100%";
      timerContainer.style.display = "none"; // Se mostrará si se establece tiempo
      
      // Reinicia el juego mezclando las preguntas
      preguntas = preguntas.sort(() => Math.random() - 0.5);
      iniciarTemporizador();
      siguientePregunta();
    }
    
    // Función para actualizar el progreso
    function actualizarProgreso() {
      progressIndicator.innerText = `Pregunta ${preguntasJugadas + 1} de ${document.getElementById('numQuestions').value}`;
    }
    
    function siguientePregunta() {
      // Animación de salida para la pregunta actual (si existe)
      const preguntaElem = document.getElementById('pregunta');
      preguntaElem.classList.add('fade-out');
      setTimeout(() => {
        preguntaElem.classList.remove('fade-out');
      }, 800);
      
      clearInterval(temporizador);
      clearInterval(timerInterval);
      // Verifica si se han jugado todas las preguntas
      if (preguntasJugadas >= parseInt(document.getElementById('numQuestions').value) || preguntas.length === 0) {
        preguntaElem.innerText = "¡Juego terminado!";
        timerContainer.style.display = "none";
        return;
      }
      preguntasJugadas++;
      actualizarProgreso();
      preguntaObj = preguntas.shift();
      let direction = document.querySelector('input[name="translationDirection"]:checked').value;
      if (direction === 'esToEn') {
        preguntaElem.innerText = preguntaObj.es;
        respuestaCorrecta = preguntaObj.en;
      } else {
        preguntaElem.innerText = preguntaObj.en;
        respuestaCorrecta = preguntaObj.es;
      }
      // Configuración de la respuesta codificada
      if (document.getElementById('mostrarCaracteresEspeciales').checked) {
        respuestaOculta = respuestaCorrecta.replace(/[A-Za-z0-9]/g, '_');
      } else {
        respuestaOculta = respuestaCorrecta.replace(/\S/g, '_');
      }
      intentosRestantes = 4;
      document.getElementById('respuestaCodificada').innerText = respuestaOculta;
      document.getElementById('respuesta').value = "";
      document.getElementById('respuesta').focus();
      document.getElementById('resultado').innerText = "";
      
      // Inicia temporizador visual si aplica
      const tiempoPregunta = parseInt(document.getElementById('timePerQuestion').value);
      if (tiempoPregunta > 0) {
        timerContainer.style.display = "block";
        let tiempoRestante = tiempoPregunta;
        timerBar.style.width = "100%";
        timerInterval = setInterval(() => {
          tiempoRestante--;
          let porcentaje = (tiempoRestante / tiempoPregunta) * 100;
          timerBar.style.width = porcentaje + "%";
          if (tiempoRestante <= 0) {
            clearInterval(timerInterval);
            clearInterval(temporizador);
            noContestadas++;
            actualizarEstadisticas();
            timeUpSound.play();
            document.getElementById('respuestaCodificada').innerText = respuestaCorrecta + " ❌";
            document.getElementById('resultado').innerText = "Tiempo agotado.";
            setTimeout(siguientePregunta, waitingTimeFail);
          }
        }, 1000);
      }
    }
    
    function iniciarTemporizador() {
      clearInterval(temporizador);
      let tiempoRestante = parseInt(document.getElementById('timePerQuestion').value);
      if (tiempoRestante > 0) {
        temporizador = setInterval(() => {
          tiempoRestante--;
          if (tiempoRestante <= 0) {
            clearInterval(temporizador);
            noContestadas++;
            actualizarEstadisticas();
            timeUpSound.play();
            document.getElementById('respuestaCodificada').innerText = respuestaCorrecta + " ❌";
            document.getElementById('resultado').innerText = "Tiempo agotado.";
            setTimeout(siguientePregunta, waitingTimeFail);
          }
        }, 1000);
      }
    }
    
    function verificarRespuesta() {
      let respuestaUsuario = document.getElementById('respuesta').value.trim();
      let respuestaOriginal = respuestaCorrecta;
      let respuestaComparacion = respuestaCorrecta;
      if (document.getElementById('ignorePeriod').checked) {
        respuestaUsuario = respuestaUsuario.replace(/\.$/, '');
        respuestaComparacion = respuestaComparacion.replace(/\.$/, '');
      }
      if (document.getElementById('ignoreCase').checked) {
        respuestaUsuario = respuestaUsuario.toLowerCase();
        respuestaComparacion = respuestaComparacion.toLowerCase();
      }
      if (respuestaUsuario === respuestaComparacion) {
        clearInterval(temporizador);
        clearInterval(timerInterval);
        aciertos++;
        actualizarEstadisticas();
        correctSound.play();
        document.getElementById('respuestaCodificada').innerText = respuestaOriginal + " ✅";
        document.getElementById('resultado').innerText = "¡Correcto!";
        document.getElementById('respuestaCodificada').classList.add('fade-in');
        setTimeout(siguientePregunta, waitingTimeCorrect);
      } else {
        intentosRestantes--;
        incorrectSound.play();
        if (intentosRestantes > 0) {
          revelarLetra();
          document.getElementById('resultado').innerText = `Intentos restantes: ${intentosRestantes}`;
        } else {
          clearInterval(temporizador);
          clearInterval(timerInterval);
          fallos++;
          actualizarEstadisticas();
          document.getElementById('respuestaCodificada').innerText = respuestaOriginal + " ❌";
          document.getElementById('resultado').innerText = "Respuesta incorrecta.";
          setTimeout(siguientePregunta, waitingTimeFail);
        }
      }
      document.getElementById('respuesta').value = "";
      document.getElementById('respuesta').focus();
    }
    
    function revelarLetra() {
      let indices = [];
      for (let i = 0; i < respuestaCorrecta.length; i++) {
        if (respuestaOculta[i] === '_' && respuestaCorrecta[i] !== ' ') {
          indices.push(i);
        }
      }
      if (indices.length === 0) return;
      let indiceAleatorio = indices[Math.floor(Math.random() * indices.length)];
      let letraSeleccionada = respuestaCorrecta[indiceAleatorio];
      let arrOculta = respuestaOculta.split('');
      for (let i = 0; i < respuestaCorrecta.length; i++) {
        if (respuestaCorrecta[i].toLowerCase() === letraSeleccionada.toLowerCase() && arrOculta[i] === '_') {
          arrOculta[i] = respuestaCorrecta[i];
        }
      }
      respuestaOculta = arrOculta.join('');
      document.getElementById('respuestaCodificada').innerText = respuestaOculta;
    }
    
    function mostrarSolucion() {
      clearInterval(temporizador);
      clearInterval(timerInterval);
      noContestadas++;
      actualizarEstadisticas();
      document.getElementById('respuestaCodificada').innerText = respuestaCorrecta + " ❌";
      document.getElementById('respuestaCodificada').classList.add('fade-in');
      setTimeout(() => {
        document.getElementById('respuestaCodificada').classList.remove('fade-in');
      }, 800);
      document.getElementById('resultado').innerText = "Solución mostrada.";
      setTimeout(siguientePregunta, waitingTimeFail);
    }
    
    function actualizarEstadisticas() {
      document.getElementById('aciertos').innerText = aciertos;
      document.getElementById('fallos').innerText = fallos;
      document.getElementById('noContestadas').innerText = noContestadas;
    }
    
    // Event listeners para botones y entradas
    document.getElementById('startButton').addEventListener('click', iniciarJuego);
    document.getElementById('answerButton').addEventListener('click', verificarRespuesta);
    document.getElementById('solutionButton').addEventListener('click', mostrarSolucion);
    document.getElementById('hintButton').addEventListener('click', () => {
      revelarLetra();
    });
    
    // Detectar Enter en el input
    document.getElementById('respuesta').addEventListener('keydown', function(event) {
      if (event.key === 'Enter') {
        event.preventDefault();
        verificarRespuesta();
      }
    });
    
    // Evitar que en móviles los botones quiten el foco del input
    document.getElementById('answerButton').addEventListener('mousedown', function(e) {
      e.preventDefault();
    });
    document.getElementById('solutionButton').addEventListener('mousedown', function(e) {
      e.preventDefault();
    });
    document.getElementById('hintButton').addEventListener('mousedown', function(e) {
      e.preventDefault();
    });
    
    // Mantener el scroll en el input en móviles
    document.getElementById('respuesta').addEventListener('focus', function() {
      this.scrollIntoView({ behavior: 'smooth', block: 'center' });
    });
  </script>
</body>
</html>
